---
title: "Why I'm Switching to Polars Away From Pandas"
subtitle: "Polars is Faster At Everything"
author: "Russ Zaliznyak <[rzaliznyak@gmail.com](mailto:rzaliznyak@gmail.com)>"
date: "2025-09-28"
execute: 
  echo: false
format: 
  html: 
    toc: true
    toc-expand: true
    toc-indent: true
---

# Introduction


### Download a CSV Example
```{python}
#| echo: true
#| code-fold: true
from numpy import mean, diff, array
from timeit import default_timer
import requests

file_location = "./data/10mb.csv"

# SHAPE OF CSV (9453, 9)
url = "https://raw.githubusercontent.com/frictionlessdata/datasets/main/files/csv/10mb.csv"
with open(file_location, "wb") as f:
    f.write(requests.get(url).content)
```


# Read & Write CSVs


:::: {.columns style="font-size: 100%;"}

::: {.column width="50%;"}

```{python}
#| code-summary: "Pandas read_csv()"
#| echo: true
#| code-fold: true
NUMBER_SIMULATIONS = int(1e2)
import pandas as pd

all_panda_read_times = []
all_panda_read_times = [default_timer()]
for j in range(NUMBER_SIMULATIONS):
    df_pandas = pd.read_csv(file_location)
    all_panda_read_times.append(default_timer())

all_panda_read_times = diff(all_panda_read_times)

panda_mean_run_time = mean(all_panda_read_times)
```

:::


::: {.column width="50%;"}

```{python}
#| code-summary: "Polars read_csv()"
#| echo: true
#| code-fold: true
import polars as pl

all_polar_read_times = [default_timer()]
for j in range(NUMBER_SIMULATIONS):
    df_polars =pl.read_csv(file_location)
    all_polar_read_times.append(default_timer())

all_polar_read_times = diff(all_polar_read_times)
polar_mean_run_time = mean(all_polar_read_times)

```

:::


::: {.column width="50%;"}

```{python}
#| code-summary: "Pandas to_csv()"
#| echo: true
#| code-fold: true
import pandas as pd

all_panda_write_times = [default_timer()]
for j in range(NUMBER_SIMULATIONS):
    df_pandas.to_csv("temp.csv")
    all_panda_write_times.append(default_timer())

all_panda_write_times = diff(all_panda_write_times)
panda_mean_write_time = mean(all_panda_write_times)


```

:::


::: {.column width="50%;"}

```{python}
#| code-summary: "Polars write_csv()"
#| echo: true
#| code-fold: true
import polars as pl

all_polar_write_times = [default_timer()]
for j in range(NUMBER_SIMULATIONS):
    df_polars.write_csv("temp.csv")
    all_polar_write_times.append(default_timer())

all_polar_write_times = diff(all_polar_write_times)
polar_write_run_time = mean(all_polar_write_times)

```

:::


::: {.column width="50%;"}


```{python}
#| code-summary: "Read Comparison"
#| echo: false
#| code-fold: true

from numpy import array
import plotly.figure_factory as ff

index_samples = array(all_panda_read_times)/array(all_polar_read_times)
speed_increase_mean = mean(index_samples)

fig = ff.create_distplot(
    [index_samples],
    group_labels=["index_samples"],  
    show_hist=False,              
    show_rug=False,          
)

fig.update_layout(showlegend=False)
fig.show()


```

<br>

Read CSVs `{python} f"{speed_increase_mean:.2f}"` faster with Polars.

:::


::: {.column width="50%;"}


```{python}
#| code-summary: "Write Comparison"
#| echo: false
#| code-fold: true
index_samples_write = array(all_panda_write_times)/array(all_polar_write_times)
speed_increase_mean_write = mean(index_samples_write)

fig = ff.create_distplot(
    [index_samples_write],
    group_labels=["index_samples"],  
    show_hist=False,              
    show_rug=False,          
)

fig.update_layout(showlegend=False)
fig.show()


```

<br>

Write CSVs `{python} f"{speed_increase_mean_write:.2f}"` faster with Polars.

:::

::::


# Constructors

:::: {.columns style="font-size: 100%;"}


::: {.column width="100%;"}

```{python}
#| code-summary: "dictionary example"
#| echo: true
#| code-fold: true
import numpy as np
import string
import random

N = 1_000_000  # 1 million rows

def random_str(n=5):
    return ''.join(random.choices(string.ascii_letters, k=n))

data = {
    "id": np.arange(N),
    "value": np.random.randint(0, 1000, size=N),
    "flag": np.random.choice([True, False], size=N),
    "category": np.random.choice(["A", "B", "C", "D"], size=N),
    "score": np.random.randn(N),
    "year": np.random.randint(2000, 2025, size=N),
    "name": [random_str(5) for _ in range(N)],   # random short strings
    "ratio": np.random.random(size=N),
    "count": np.random.randint(1, 100, size=N),
}
```
:::

::: {.column width="50%;"}

```{python}
#| code-summary: "Pandas DataFrame()"
#| echo: true
#| code-fold: true
import pandas as pd

all_panda_constructor_times = [default_timer()]
for j in range(NUMBER_SIMULATIONS):
    df_pandas = pd.DataFrame.from_dict(data)
    all_panda_constructor_times.append(default_timer())

all_panda_constructor_times = diff(all_panda_constructor_times)
panda_constructor_mean_time = mean(all_panda_constructor_times)

```

:::


::: {.column width="50%;"}

```{python}
#| code-summary: "Polars DataFrame()"
#| echo: true
#| code-fold: true
import polars as pol

all_polar_constructor_times = [default_timer()]
for j in range(NUMBER_SIMULATIONS):
    df_polars = pl.DataFrame(data)
    all_polar_constructor_times.append(default_timer())

all_polar_constructor_times = diff(all_polar_constructor_times)
polar_constructor_mean_time = mean(all_polar_constructor_times)

```

:::



::: {.column width="50%;"}


```{python}
#| code-summary: "Constructor Comparison"
#| echo: false
#| code-fold: true
index_samples_constructor = array(all_polar_constructor_times)/array(all_panda_constructor_times)
speed_increase_mean_constructor = mean(index_samples_constructor)

fig = ff.create_distplot(
    [index_samples_constructor],
    group_labels=["index_samples"],  
    show_hist=False,              
    show_rug=False,          
)

fig.update_layout(showlegend=False)
fig.show()


```

<br>

Construct DataFrames `{python} f"{speed_increase_mean_constructor:.2f}"` faster with Polars.

:::

::::